{
	"posts": [
		{
		"id": 0,
		"title": "L is for Liftoff, Learning, and Landing",
		"post": "Greetings and welcome!  This will be the inaugural post for this blog which will serve as my learning journal for the next six months.  Here I hope to create a record of my experience learning web development and to synthesize new understandings about code, technology, and the learning process.

But let’s back up a bit and get properly introduced.  My name is Jeremy and I am currently enrolled in a six-month web development bootcamp at the Nashville Software School in Tennessee.  I am making a mid-life pivot to coding after seven years as a public school teacher.  Technology has always inspired me from a young age of writing BASIC on an inherited Radio Shack TRS-80, to banging out primitive HTML-only sites in the Netscape Navigator era, to eventually teaching young people the joys of robotics and Arduino in an elementary school robotics club.  After feeling a strong need for change, I am finally making technology my career and I am very excited for what’s ahead.

Now that this blog has finally had it’s launch, where do I hope it will end up?  My goal for this blog is to document my learning journey going from an eager programming hobbyist to a professional web developer.  I hope to synthesize new understandings I gain and be able to comment on them in my own words.  That said, I don’t really expect to be a place for any new insights for seasoned programmers.  A better reason to come here would be to follow one person’s path through the rigors of a coding bootcamp and to see where we land afterward.

Now that we’re acquainted, let’s see where all of this finally lands.  Thanks for joining me."
		}
		{
		"id": 1,
		"title": "T is for Terminal, Tools, and Typing",
		"post": "One of the first challenges I’m finding in getting into the developer workflow is keeping my fingers off the laptop’s trackpad.  This means staying away from Apple’s Finder and getting to know the terminal.  As I get a little more muscle memory developed, I’m finding that I can think and type out simple commands, almost like saying magic words and what I want on a web page or a window appears into being.

At Nashville Software School, we’re encouraged to get our machines set up with Oh My Zsh with Autojump for quick terminal navigation and feedback.  I’ve also put together the Agnoster theme for quickly seeing what branch I’m on in Git as well as other indicators that I’m sure I’ll find more and more useful along the way.  I’ve learned how to permanently save aliases for creating my own two-letter commands for more complex processes and we’re using Http-Server for viewing web pages on a virtual server on our own machines.

I can also add a couple of cool tool recommendations of my own that I’ve been using for the past few years.   One is Quicksilver, which is like an enhanced Apple Spotlight that can learn your workflow and open and move around different applications with quick key commands.  Another favorite of mine is SizeUp which can organize multiple windows by typing them into a preferred arrangement – definitely worth its small price tag.  Lastly iTerm2 gives a lot of enhanced features than those of the regular OSX Terminal.

My next challenge is moving my way around Sublime with just the nimble fingers.  Let’s how long that takes."
		}
		{
		"id": 2,
		"title": "P is For Productivity and Pomodoro",
		"post": "I’ve finished my first full week of developer bootcamp at Nashville Software School and so far, I’ve got much to show for it.  I’ve built a portfolio site, I’ve taken the CSS Zen Garden challenge, and I’ve even made a working Fibonacci number generator, a coin counter, and a temperature converter should you be in need of such things.  Most significantly, I worked on a four-person team to build a fictional company page, building and calling data objects for a products page in addition to resolving layout and design issues that go into building a site.  Most importantly, I got my feet wet with the process of using version control in a team environment, Git and Github in our case.  There were plenty of mistakes to learn from, accidentally working on the master branch, creating complicated merge conflicts, and suddenly losing an hour or two of work by getting ahead of the master branch without merging.  After getting a taste for what could go wrong, my team and I eventually got the workflow in order, thankful to get a chance to make all of these mistakes now instead of in a real-life production setting.

During these long sprints of writing code, I often wonder what more authentic development work will be like for me in the near future, working with deadlines, working with complex codebases, and working on larger and more experienced teams.  Right now, I’m noting what the process of writing code is like for me, how I organize tasks, and how I manage my time.  This could just be beginner’s excitement, but I find I don’t get tired or disengaged from writing code, and that I have to force myself to take breaks just to save my eyes and my back.  One of the ways that I’ve organized independent work for a while now is adopting the Pomodoro Technique.

The Pomodoro technique works like this: make a list of tasks and group tasks into 25-minute blocks.  Set a timer and work through the task block without distractions for 25 minutes, then stop for five minutes.  During the five-minute break, get up, walk around, warm up the coffee, check email and Facebook, then repeat for another 25 then five minutes.  Do these intervals four times, then take a 25- to 30-minute break.  Lifehacker has got a much more detailed description of the Pomodoro technique that’s worth a read, but the above is the gist of it.

I started using Pomodoros when I was a teacher and I had to do my grading, an extremely tedious task, almost always done at home during evenings and weekends, and one that was difficult to get through without email-checking and housecleaning getting in the way.  I found that not only did the 25-minute sprints help me pick up the pace, but the five-minute breaks provided a kind of interruption that made me really want to get back into my task blocks and keep the pace going.  Then the final long break became a sort of reward, the emails and Facebook posts still got checked and if an untidy living room was bothering me, there were opportunities to fix it.

I broke out my Pomodoro app to do coding too.  I find that every day I’m solving algorithm challenges when I first wake up, doing group and peer programming during class sessions, and going through projects and coding exercises into the evening.  I’m spending a lot of time with my hands on the keyboard and my brain wrapping itself around loops and function callbacks.  I’m finding I get immersed in these tasks, like playing a really good video game, and it is difficult to walk away from the laptop for a bit, a good problem to have to be sure.  The Pomodoro helps me by forcing me into short breaks that help clear my head and keep my thinking nimble.  After hearing several peers tell me that solutions to difficult problems often come to them not at the text editor but driving home, I find the 25-minute break sometimes provides the same thing for me.  Often the solutions to problems come when the mind eases from Javascript syntax back to human language and I can approach a problem from a new direction.

I’ll be looking into more productivity strategies as I continue to work in teams, and grow to incorporate interruptions, meetings, and other tasks that come with a real web development job.

"
		}
		{
		"id": 3,
		"title": "G is for Grit and Grind",
		"post": "I’m finding that writing code can be a lot like writing prose.  In both writing and code there is the paralysis of staring at the blank page.  I’ve had a few of these moments this week.

My biggest challenge this week resulted in the text tree that you see above.  The challenge was to “grow a tree” with a character and a specified height.  It is still at a more basic level as far as algorithm challenges go, but it was definitely right in my zone of proximal development and a fun way to play with nested loops in javascript.

In teaching, one of the traits we would try to instill in learners is a sense of grit, in being able to grind through problems until the right solution is reached.  Now that I’m again a learner myself, I’m finding this same trait is what I need to carry me through making sure all test cases are passed, that user interfaces are functional and a pleasure to use, and that code is DRY and optimized.  Below are a few strategies that I’ve used to keep things moving forward while independently grinding through difficult coding problems:"
		}
	]
}